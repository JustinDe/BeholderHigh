(function() {
  var Promise, ajax, request, requestBuilderToResponsePromise, requestDataByMethod, requestWithDefaults, responsetoResponseBody, superagent, _;

  superagent = require('superagent');

  Promise = require('bluebird');

  _ = {
    merge: require('lodash-node/modern/objects/merge')
  };

  requestBuilderToResponsePromise = function(requestBuilder) {
    return new Promise(function(resolve, reject) {
      return requestBuilder.end(function(err, res) {
        if (err) {
          return reject(err);
        } else {
          return resolve(res);
        }
      });
    });
  };

  responsetoResponseBody = function(response) {
    if (response.error) {
      throw new Error(response.status);
    } else if (response.body) {
      return response.body;
    } else if (response.text) {
      return response.text;
    } else {
      throw new Error("Empty response");
    }
  };

  request = function(method, path, options) {
    if (options == null) {
      options = {};
    }
    return requestBuilderToResponsePromise((function() {
      var header, part, partBuilder, requestBuilder, value, _i, _len, _ref, _ref1, _ref2;
      if (superagent[method] == null) {
        throw new Error("No such request builder method: " + method);
      }
      requestBuilder = superagent[method](options.baseUrl != null ? [options.baseUrl, path].join('') : path);
      if (options.headers) {
        _ref = options.headers || {};
        for (header in _ref) {
          value = _ref[header];
          requestBuilder.set(header, value);
        }
      }
      if (options.query) {
        requestBuilder.query(options.query);
      }
      if (options.type != null) {
        requestBuilder.type(options.type);
      }
      if (options.accept != null) {
        requestBuilder.accept(options.accept);
      }
      if (options.parts != null) {
        _ref1 = options.parts;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          part = _ref1[_i];
          partBuilder = requestBuilder.part();
          _ref2 = part.headers || {};
          for (header in _ref2) {
            value = _ref2[header];
            partBuilder.set(header, value);
          }
          if (part.data != null) {
            partBuilder.write(part.data);
          }
        }
      } else if (options.data != null) {
        requestBuilder.send(options.data);
      }
      if (options.buffer && (requestBuilder.buffer != null)) {
        requestBuilder.buffer();
      }
      return requestBuilder;
    })());
  };

  requestWithDefaults = function() {
    return function(method, path, options) {
      var mergedOptions;
      if (options == null) {
        options = {};
      }
      this.config || (this.config = {});
      mergedOptions = _.merge(options, this.config);
      return request(method, path, mergedOptions);
    };
  };

  requestDataByMethod = function(method) {
    return function(path, options) {
      var mergedOptions;
      if (options == null) {
        options = {};
      }
      this.config || (this.config = {});
      mergedOptions = _.merge(options, this.config);
      return request(method, path, mergedOptions).then(responsetoResponseBody);
    };
  };

  module.exports = ajax = {
    setDefaults: function(config) {
      return this.config = config;
    },
    request: requestWithDefaults(),
    get: requestDataByMethod('get'),
    post: requestDataByMethod('post'),
    del: requestDataByMethod('del'),
    put: requestDataByMethod('put')
  };

}).call(this);
