(function() {
  var List, Optional, arrayTypeFromItemSchema, contains, mapValues, objectTypeFromPropertySchema, objects, primitive, typeFromJsonSchema;

  mapValues = require('lodash-node/modern/objects/mapValues');

  contains = require('lodash-node/modern/collections/contains');

  primitive = require('./primitives');

  objects = require('./objects');

  List = require('./list');

  Optional = require('./optional');

  typeFromJsonSchema = function(schema) {
    switch (schema != null ? schema.type : void 0) {
      case "string":
        return primitive.String;
      case "number":
        return primitive.Number;
      case "boolean":
        return primitive.Boolean;
      case "object":
        return objectTypeFromPropertySchema(schema.properties || null, schema.required || []);
      case "array":
        return arrayTypeFromItemSchema(schema.items || {});
      default:
        return primitive.Any;
    }
  };

  arrayTypeFromItemSchema = function(itemSchema) {
    return List(typeFromJsonSchema(itemSchema));
  };

  objectTypeFromPropertySchema = function(propertiesToSchemas, requiredProperties) {
    if (propertiesToSchemas == null) {
      return objects.Map(primitive.Any);
    } else {
      return objects.Object(mapValues(propertiesToSchemas, function(propertySchema, propertyName) {
        var propertyType;
        propertyType = typeFromJsonSchema(propertySchema);
        if ((propertySchema != null ? propertySchema.required : void 0) || (contains(requiredProperties, propertyName))) {
          return propertyType;
        } else {
          return Optional(propertyType);
        }
      }));
    }
  };

  module.exports = {
    fromJsonSchema: typeFromJsonSchema
  };

}).call(this);
