(function() {
  var Failure, List, Success, assert, check, listSequence, objectWithProperty, _ref;

  _ref = require('data.validation'), Success = _ref.Success, Failure = _ref.Failure;

  assert = require('../assert');

  check = require('../check');

  objectWithProperty = require('./helpers').objectWithProperty;

  listSequence = function(list) {
    var failures, index, result, validation;
    failures = [];
    result = (function() {
      var _i, _len, _results;
      _results = [];
      for (index = _i = 0, _len = list.length; _i < _len; index = ++_i) {
        validation = list[index];
        _results.push(validation.fold(function(failure) {
          failures = failures.concat(objectWithProperty(index)(failure));
          return null;
        }, function(success) {
          return success;
        }));
      }
      return _results;
    })();
    if (failures.length > 0) {
      return Failure(failures);
    } else {
      return Success(result);
    }
  };

  module.exports = List = function(type) {
    assert.isFunction(type);
    return function(input) {
      var value;
      if (!check.isArray(input)) {
        return Failure(["Input was of type " + (check.typeAsString(input)) + " instead of array"]);
      } else {
        return listSequence((function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = input.length; _i < _len; _i++) {
            value = input[_i];
            _results.push(type(value));
          }
          return _results;
        })());
      }
    };
  };

}).call(this);
