(function() {
  var merge, ramlSchemaToResourceBundle;

  merge = require('lodash-node/modern/objects/merge');

  module.exports = ramlSchemaToResourceBundle = function(schema) {
    var baseUrl, options, resource, resources, _i, _len, _ref;
    baseUrl = schema.baseUri.replace("/v1", "/v2");
    options = {
      baseUrl: baseUrl
    };
    resources = {};
    _ref = schema.resources;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      resource = _ref[_i];
      resources[resource.metadata.name] = {
        schema: {
          fields: (function() {
            var action, name, relativeUri, _ref1, _ref2;
            _ref1 = resource.actionsByName();
            for (name in _ref1) {
              _ref2 = _ref1[name], relativeUri = _ref2.relativeUri, action = _ref2.action;
              if (!(name === 'find')) {
                continue;
              }
              options.headers = action.headerDefaults();
              return action.fieldsForAction();
            }
          })()
        }
      };
      if (resource.metadata.identifierKey != null) {
        resources[resource.metadata.name].schema.identifier = resource.metadata.identifierKey;
        if (resources[resource.metadata.name].schema.fields[resource.metadata.identifierKey] != null) {
          resources[resource.metadata.name].schema.fields[resource.metadata.identifierKey].identity = true;
        } else {
          resources[resource.metadata.name].schema.fields[resource.metadata.identifierKey] = {
            type: "string",
            identity: true
          };
        }
      }
    }
    return {
      options: options,
      resources: resources
    };
  };

}).call(this);
