(function() {
  var FileReader, Promise, ServiceSchema, ajax, jsonObject, ramlParser, _,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ = {
    merge: require('lodash-node/modern/objects/merge')
  };

  Promise = require('bluebird');

  ajax = require('ag-restful').ajax;

  ramlParser = require('raml-parser');

  FileReader = (function(_super) {
    __extends(FileReader, _super);

    function FileReader() {
      return FileReader.__super__.constructor.apply(this, arguments);
    }

    FileReader.prototype.fetchFileAsync = function(url) {
      return ajax.request('get', url, {
        buffer: true
      }).then(function(response) {
        if (response.error) {
          throw new Error(response.status);
        } else if (response.text) {
          return response.text;
        } else {
          throw new Error("Empty response");
        }
      });
    };

    return FileReader;

  })(ramlParser.FileReader);

  jsonObject = function(v) {
    return JSON.parse(v || '{}');
  };

  ServiceSchema = (function() {
    var ResourceSchema;

    function ServiceSchema(_arg) {
      var resource, resources;
      this.title = _arg.title, this.baseUri = _arg.baseUri, resources = _arg.resources;
      if (resources != null) {
        this.resources = (function() {
          var _i, _len, _results;
          _results = [];
          for (_i = 0, _len = resources.length; _i < _len; _i++) {
            resource = resources[_i];
            _results.push(new ResourceSchema(resource));
          }
          return _results;
        })();
      } else {
        this.resources = [];
      }
    }

    ServiceSchema.prototype.resource = function(name) {
      var resource, _i, _len, _ref;
      _ref = this.resources;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        resource = _ref[_i];
        if (resource.metadata.name === name) {
          return resource;
        }
      }
      throw new Error("Resource '" + name + "' not found in schema");
    };

    ResourceSchema = (function() {
      var ActionSchema, ResourceMetadataSchema;

      function ResourceSchema(_arg) {
        var description, method, methods, resource, resources;
        this.relativeUri = _arg.relativeUri, methods = _arg.methods, resources = _arg.resources, description = _arg.description;
        this.actions = (function() {
          var _i, _len, _ref, _results;
          _ref = methods || [];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            method = _ref[_i];
            _results.push(new ActionSchema(method));
          }
          return _results;
        })();
        this.resources = (function() {
          var _i, _len, _ref, _results;
          _ref = resources || [];
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            resource = _ref[_i];
            _results.push(new ResourceSchema(resource));
          }
          return _results;
        })();
        this.metadata = new ResourceMetadataSchema(jsonObject(description));
      }

      ResourceSchema.prototype.actionsByName = (function() {
        var resourceActionsAndUriByName, scanResourcesForActions;
        resourceActionsAndUriByName = function(relativeUri, resourceActions) {
          var action, actions, _i, _len;
          actions = {};
          for (_i = 0, _len = resourceActions.length; _i < _len; _i++) {
            action = resourceActions[_i];
            actions[action.name()] = {
              relativeUri: relativeUri,
              action: action
            };
          }
          return actions;
        };
        scanResourcesForActions = function(relativeUri, resources) {
          var actions, resource, uri, _i, _len;
          actions = {};
          for (_i = 0, _len = resources.length; _i < _len; _i++) {
            resource = resources[_i];
            uri = [relativeUri, resource.relativeUri].join('');
            _.merge(actions, resourceActionsAndUriByName(uri, resource.actions), scanResourcesForActions(uri, resource.resources));
          }
          return actions;
        };
        return function() {
          return scanResourcesForActions('', [this]);
        };
      })();

      ResourceMetadataSchema = (function() {
        function ResourceMetadataSchema(_arg) {
          var resourceName;
          resourceName = _arg.resourceName, this.identifierKey = _arg.identifierKey;
          this.name = resourceName;
        }

        return ResourceMetadataSchema;

      })();

      ActionSchema = (function() {
        var ActionMetadataSchema, HeaderSchema, ResponseSchema;

        function ActionSchema(_arg) {
          var code, description, header, headers, name, response, responses;
          this.method = _arg.method, this.body = _arg.body, headers = _arg.headers, responses = _arg.responses, description = _arg.description;
          this.responses = (function() {
            var _results;
            _results = [];
            for (code in responses) {
              response = responses[code];
              _results.push(new ResponseSchema(code, response || {}));
            }
            return _results;
          })();
          this.headers = (function() {
            var _results;
            _results = [];
            for (name in headers) {
              header = headers[name];
              _results.push(new HeaderSchema(name, header || {}));
            }
            return _results;
          })();
          this.metadata = new ActionMetadataSchema(jsonObject(description));
        }

        ActionSchema.prototype.name = function() {
          return this.metadata.name || '';
        };

        ActionSchema.prototype.headerDefaults = function() {
          var defaults, header, _i, _len, _ref;
          defaults = {};
          _ref = this.headers;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            header = _ref[_i];
            if (header["default"] != null) {
              defaults[header.name] = header["default"];
            }
          }
          return defaults;
        };

        ActionSchema.prototype.fieldsForAction = function() {
          var properties, response, _i, _len, _ref, _ref1;
          _ref = this.responses;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            response = _ref[_i];
            if (response.schema != null) {
              properties = response.schema.properties || {};
              if (response.metadata.rootKey != null) {
                properties = ((_ref1 = properties[response.metadata.rootKey]) != null ? _ref1.properties : void 0) || {};
              }
              return properties;
            }
          }
          return {};
        };

        ActionMetadataSchema = (function() {
          function ActionMetadataSchema(_arg) {
            var action;
            action = _arg.action, this.rootKey = _arg.rootKey;
            this.name = action;
          }

          return ActionMetadataSchema;

        })();

        ResponseSchema = (function() {
          var ResponseMetadataSchema;

          function ResponseSchema(code, response) {
            var _ref, _ref1;
            this.code = code;
            this.schema = jsonObject((_ref = response.body) != null ? (_ref1 = _ref['application/json']) != null ? _ref1.schema : void 0 : void 0);
            this.metadata = new ResponseMetadataSchema(jsonObject(response.description));
          }

          ResponseMetadataSchema = (function() {
            function ResponseMetadataSchema(_arg) {
              this.rootKey = _arg.rootKey;
            }

            return ResponseMetadataSchema;

          })();

          return ResponseSchema;

        })();

        HeaderSchema = (function() {
          function HeaderSchema(name, _arg) {
            this.name = name;
            this["default"] = _arg["default"];
          }

          return HeaderSchema;

        })();

        return ActionSchema;

      })();

      return ResourceSchema;

    })();

    return ServiceSchema;

  })();

  module.exports = {
    fromUrl: function(url) {
      return Promise.cast(ramlParser.loadFile(url, {
        reader: new FileReader
      })).then(module.exports.fromObject);
    },
    fromFile: function(filepath) {
      return Promise.cast(ramlParser.loadFile(filepath)).then(module.exports.fromObject);
    },
    fromObject: function(description) {
      return new ServiceSchema(description);
    }
  };

}).call(this);
