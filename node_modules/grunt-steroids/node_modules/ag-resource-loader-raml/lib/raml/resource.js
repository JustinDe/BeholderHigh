(function() {
  var addIdProperty, ramlResourceFromSchema, requestValidationForAction, responseValidationsForAction, restful, types, uriToFunction, _;

  _ = {
    template: require('lodash-node/modern/utilities/template'),
    zipObject: require('lodash-node/modern/arrays/zipObject')
  };

  restful = require('ag-restful');

  types = require('./types');

  uriToFunction = function(uri) {
    var uriTemplate;
    uriTemplate = _.template(uri, null, {
      interpolate: /{([\s\S]+?)}/g
    });
    return function(id) {
      return uriTemplate({
        id: id
      });
    };
  };

  responseValidationsForAction = function(action, afterValidation) {
    var response;
    if (afterValidation == null) {
      afterValidation = function(v) {
        return v;
      };
    }
    if (!action.responses.length) {
      return types.Try(afterValidation);
    }
    return _.zipObject((function() {
      var _i, _len, _ref, _results;
      _ref = action.responses;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        response = _ref[_i];
        _results.push([response.code, types.TraverseByPath(response.metadata.rootKey, types.Try(afterValidation))]);
      }
      return _results;
    })());
  };

  requestValidationForAction = function(action) {
    if (action.metadata.rootKey != null) {
      return types.FromProperty(action.metadata.rootKey);
    } else {
      return types.Any;
    }
  };

  addIdProperty = function(identifier, item) {
    if ((item.id == null) && (identifier !== 'id')) {
      Object.defineProperty(item, 'id', {
        get: function() {
          return this[identifier];
        },
        enumerable: true
      });
    }
    return item;
  };

  module.exports = ramlResourceFromSchema = function(resourceName) {
    return function(schema) {
      return restful({
        baseUrl: schema.baseUri
      }, function(api) {
        var action, name, relativeUri, resource, resourceDescription, _ref, _ref1;
        resource = {
          schema: {},
          upload: api.upload({
            receive: api.response({
              201: types.Any
            })
          })
        };
        resourceDescription = schema.resource(resourceName);
        resource.schema.identifier = resourceDescription.metadata.identifierKey;
        _ref = resourceDescription.actionsByName();
        for (name in _ref) {
          _ref1 = _ref[name], relativeUri = _ref1.relativeUri, action = _ref1.action;
          resource[name] = api[action.method]({
            path: uriToFunction(relativeUri),
            send: api.request(requestValidationForAction(action)),
            receive: api.response(responseValidationsForAction(action, (function() {
              if (resource.schema.identifier != null) {
                switch (name) {
                  case 'find':
                    return function(item) {
                      return addIdProperty(resource.schema.identifier, item || {});
                    };
                  case 'collection':
                    return function(collection) {
                      var item, _i, _len, _ref2;
                      _ref2 = collection || [];
                      for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
                        item = _ref2[_i];
                        addIdProperty(resource.schema.identifier, item || {});
                      }
                      return collection;
                    };
                }
              }
            })())),
            options: {
              headers: action.headerDefaults()
            }
          });
          if (name === 'find') {
            resource.schema.fields = (function() {
              var description, fields, _ref2;
              fields = {};
              _ref2 = action.fieldsForAction();
              for (name in _ref2) {
                description = _ref2[name];
                fields[name] = description.type;
              }
              return fields;
            })();
          }
        }
        return resource;
      });
    };
  };

}).call(this);
