_ = {
  template: require 'lodash-node/modern/utilities/template'
  zipObject: require 'lodash-node/modern/arrays/zipObject'
}

restful = require 'ag-restful'
types = require './types'

uriToFunction = (uri) ->
  uriTemplate = _.template(uri, null, interpolate: /{([\s\S]+?)}/g)
  (id) ->
    uriTemplate {id}

responseValidationsForAction = (action, afterValidation = (v) -> v) ->
  if !action.responses.length
    return types.Try afterValidation

  _.zipObject (
    for response in action.responses
      [
        response.code
        types.TraverseByPath response.metadata.rootKey, types.Try afterValidation
      ]
  )

requestValidationForAction = (action) ->
  # NOTE: Does not take into account nested root keys
  if action.metadata.rootKey?
    types.FromProperty action.metadata.rootKey
  else
    types.Any

addIdProperty = (identifier, item) ->
  if !item.id? and (identifier isnt 'id')
    Object.defineProperty item, 'id', {
      get: -> @[identifier]
      enumerable: true # should show up when the object is serialized
    }
  item

module.exports = ramlResourceFromSchema = (resourceName) -> (schema) ->
  restful {
    baseUrl: schema.baseUri
  }, (api) ->
    resource = {
      schema: {}
      upload: api.upload
        receive: api.response
          201: types.Any
    }

    resourceDescription = schema.resource(resourceName)
    resource.schema.identifier = resourceDescription.metadata.identifierKey

    for name, {relativeUri, action} of resourceDescription.actionsByName()
      resource[name] = api[action.method]
        path: uriToFunction relativeUri
        send: api.request requestValidationForAction action
        receive: api.response responseValidationsForAction(
          action,
          # KLUDGE: after validation, add magical id accessors
          if resource.schema.identifier?
            switch name
              when 'find' then (item) ->
                addIdProperty resource.schema.identifier, item || {}
              when 'collection' then (collection) ->
                for item in collection || []
                  addIdProperty resource.schema.identifier, item || {}
                collection
        )
        options:
          headers: action.headerDefaults()

      # Deduce resource schema based on what the find action says
      if name is 'find'
        resource.schema.fields = do ->
          fields = {}
          for name, description of action.fieldsForAction()
            fields[name] = description.type
          fields

    resource
